AWSTemplateFormatVersion: 2010-09-09
Description: >
  Standard ECS service

Parameters:

  AttiniEnvironmentName:
    Type: String
    Description: The name of the environment the stack created belongs to

  AppName:
    Type: String

  ContainerRepository:
    Type: String

  ContainerTag:
    Type: String

  ContainerMemory:
    Type: Number
    Description: The allocated memory for the container
    Default: 256
    AllowedValues:
      - 256
      - 320
      - 384
      - 448
      - 512
      - 768
      - 1024
      - 1280
      - 1536
      - 1792
      - 2048
      - 2560
      - 3072
      - 4096
      - 6144

  DesiredCount:
    Type: String
    Description: How many containers should run?

  ContainerCpu:
    Type: Number
    Description: The allocated Cpu for the container
    Default: 100

  EnvoyImage:
    Type: String
    Description: The envoy image

  EcsCluster:
    Type: String

  SecurityGroup:
    Type: String
    Description: Tasks security group

  CloudMapNamespaceId:
    Type: String

  CloudMapNamespaceName:
    Type: String

  MeshName:
    Type: String

  TaskExecutionRoleArn:
    Type: String

  EfsId:
    Type: String
    Description: Default filesystem Id

  CapacityProvider:
    Type: String
    Description: Ecs capacity provider


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Manually managed configuration
      Parameters:
        - DesiredCount
        - ContainerRepository
        - ContainerTag
    - Label:
        default: Attini managed configuration
      Parameters:
        - CapacityProvider
        - EfsId
        - TaskExecutionRoleArn
        - MeshName
        - CloudMapNamespaceName
        - CloudMapNamespaceId
        - SecurityGroup
        - EcsCluster
        - EnvoyImage
        - Environment
        - AppName




Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    UpdateReplacePolicy: Retain
    Properties:
      ExecutionRoleArn: !Ref TaskExecutionRoleArn
      TaskRoleArn:
        Fn::ImportValue:
          !Sub ${AttiniEnvironmentName}-${AppName}-security-setup:ecs-task-role
      Family: !Sub ${AttiniEnvironmentName}-${AppName}
      Tags:
      - Key: Environment
        Value: !Ref AttiniEnvironmentName
      - Key: StackName
        Value: !Ref AWS::StackName
      NetworkMode: awsvpc
      Volumes:
        - Name: !Sub ${AppName}_volume
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId:
                Fn::ImportValue:
                  !Sub ${AttiniEnvironmentName}-${AppName}-security-setup:efs-access-point
              IAM: ENABLED
            FilesystemId: !Ref EfsId
            TransitEncryption: ENABLED
      ProxyConfiguration:
        ContainerName: !Sub ${AttiniEnvironmentName}-${AppName}-envy
        Type: APPMESH
        ProxyConfigurationProperties:
        - Name: IgnoredUID
          Value: 101
        - Name: IgnoredGID
          Value: 101
        - Name: AppPorts
          Value: 80
        - Name: ProxyIngressPort
          Value: 15000
        - Name: ProxyEgressPort
          Value: 15001
        - Name: EgressIgnoredIPs
          Value: 169.254.170.2,169.254.169.254
        - Name: EgressIgnoredPorts
          Value: 22,2049
      ContainerDefinitions:
        -
          Name: !Sub ${AttiniEnvironmentName}-${AppName}
          Essential: true
          Environment:
            -
              Name: ENVIRONMENT
              Value: !Ref AttiniEnvironmentName
            -
              Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            -
              Name: APP_NAME
              Value: !Ref AppName
          Image: !Sub ${ContainerRepository}:${ContainerTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskDefinitionLogGroup
              awslogs-region: !Ref AWS::Region
          MemoryReservation: !Ref ContainerMemory
          Cpu: !Ref ContainerCpu
          PortMappings:
            - ContainerPort: 80
          MountPoints:
            - ContainerPath: !Sub /mnt/default-efs
              SourceVolume: !Sub ${AppName}_volume

        -
          Name: !Sub ${AttiniEnvironmentName}-${AppName}-envy
          Image: !Ref EnvoyImage
          Essential: false
          Environment:
            -
              Name: APPMESH_RESOURCE_ARN
              Value: !Sub  arn:aws:appmesh:${AWS::Region}:${AWS::AccountId}:mesh/${MeshName}/virtualNode/${AttiniEnvironmentName}-${AppName}-node
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EnvyLogGroup
              awslogs-region: !Ref AWS::Region
          MemoryReservation: 20
          Cpu: 10
          User: 101:101

  TaskDefinitionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AttiniEnvironmentName}/${AppName}"
      RetentionInDays: 30

  EnvyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AttiniEnvironmentName}/${AppName}/envy"
      RetentionInDays: 30

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      ServiceRegistries:
      - ContainerName: !Sub ${AttiniEnvironmentName}-${AppName}
        RegistryArn: !GetAtt ServiceDiscovery.Arn
      TaskDefinition: !Ref TaskDefinition
      EnableECSManagedTags: true
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: binpack
          Field: memory
      PlacementConstraints:
        - Type: distinctInstance
      PropagateTags: TASK_DEFINITION
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - Fn::ImportValue:
                !Sub ${AttiniEnvironmentName}-vpc:private-subnet-az-a
            - Fn::ImportValue:
                !Sub ${AttiniEnvironmentName}-vpc:private-subnet-az-b
      CapacityProviderStrategy:
      - CapacityProvider:
          !Ref CapacityProvider
        Base: 1
        Weight: 1

  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Sub ${AppName}
      Description: !Ref AWS::StackName
      DnsConfig:
        DnsRecords:
        - Type: A
          TTL: 30
        NamespaceId: !Ref CloudMapNamespaceId
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 2
      NamespaceId: !Ref CloudMapNamespaceId


  VirtualNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${MeshName}
      VirtualNodeName: !Sub ${AttiniEnvironmentName}-${AppName}-node
      Spec:
        Listeners:
          - ConnectionPool:
              HTTP:
                MaxConnections: 10
                MaxPendingRequests: 10
            HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 5000
              Path: /
              Port: 80
              Protocol: http
              TimeoutMillis: 30000
              UnhealthyThreshold: 5
            PortMapping:
              Port: 80
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: !Ref CloudMapNamespaceName
            ServiceName: !GetAtt ServiceDiscovery.Name


  VirtualRouter:
    Type: AWS::AppMesh::VirtualRouter
    Properties:
      MeshName: !Sub ${MeshName}
      VirtualRouterName: !Sub ${AttiniEnvironmentName}-${AppName}-router
      Spec:
        Listeners:
        - PortMapping:
            Port: 80
            Protocol: http


  Route:
    Type: AWS::AppMesh::Route
    Properties:
      MeshName: !Sub ${MeshName}
      Spec:
        HttpRoute:
          Action:
            WeightedTargets:
              - VirtualNode: !GetAtt VirtualNode.VirtualNodeName
                Weight: 1
          Match:
            Prefix: /
          RetryPolicy:
            HttpRetryEvents:
              - server-error
              - gateway-error
            MaxRetries: 5
            PerRetryTimeout:
              Unit: s
              Value: 1
      VirtualRouterName: !GetAtt VirtualRouter.VirtualRouterName


  VirtualService:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !Sub ${MeshName}
      VirtualServiceName: !Sub ${AttiniEnvironmentName}-${AppName}-service
      Spec:
        Provider:
          VirtualRouter:
            VirtualRouterName: !GetAtt VirtualRouter.VirtualRouterName