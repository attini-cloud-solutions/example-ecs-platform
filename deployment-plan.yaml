AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AttiniDeploymentPlan
  - AWS::Serverless-2016-10-31

Parameters:
  AttiniEnvironmentName:
    Type: String

  AttiniDistributionName:
    Type: String

  AttiniDistributionId:
    Type: String



Resources:

  PlatformDeployPlan:
    Type: Attini::Deploy::DeploymentPlan
    Properties:
      RoleArn: !GetAtt AttiniDeploymentPlanRole.Arn
      DeploymentPlan:
        StartAt: Step1
        States:
          Step1:
            Type: Parallel
            Branches:
              - StartAt: Vpc
                States:
                  Vpc:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-vpc
                      Template: /network/vpc.yaml
                      ConfigFile: !Sub /network/cfn-config/${AttiniEnvironmentName}-vpc.json
                    Next: SecurityGroups

                  SecurityGroups:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-security-groups
                      Template: /network/security-groups.yaml
                    End: true

              - StartAt: CfnStackRoles
                States:
                  CfnStackRoles:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-cfn-stack-roles
                      Template: /cfn-roles.yaml
                    End: true

            Next: MergeNetworkResources

          MergeNetworkResources:
            Type: AttiniMergeOutput
            Next: InfraResources

          InfraResources:
            Type: Parallel
            Next: MergeInfraResources
            Branches:

              - StartAt: PostgresSecuritySetup
                States:
                  PostgresSecuritySetup:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-postgres-rds-security-setup-v1
                      Template: /databases/postgres-security-setup.yaml
                      Parameters:
                        DatabaseName: postgres
                    Next: Postgres
                  Postgres:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-postgres-rds-v1
                      Template: /databases/postgres.yaml
                      Parameters:
                        DatabaseName: postgres
                        SecurityGroup.$: $.output.SecurityGroups.PostgreSqlSecurityGroup
                        PostgreAdminAccess.$: $.output.PostgresSecuritySetup.PostgreAdminAccess
                    End: true

              - StartAt: Efs
                States:
                  Efs:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-apps-efs
                      Template: /apps-infra/efs.yaml
                      Parameters:
                        SecurityGroup.$: $.output.SecurityGroups.EfsSecurityGroup
                    Next: EcsClusterSecuritySetup

                  EcsClusterSecuritySetup:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-ecs-cluster-security-setup
                      Template: /apps-infra/ecs-cluster-security-setup.yaml
                      Parameters:
                        EfsId.$: $.output.Efs.EfsId
                    Next: CreateECSServiceLinkedRole

                  CreateECSServiceLinkedRole:
                    Type: Task
                    Resource: arn:aws:states:::aws-sdk:iam:createServiceLinkedRole
                    ResultPath: null
                    Parameters:
                      AwsServiceName: ecs.amazonaws.com
                    Catch:
                    - ErrorEquals: [ Iam.InvalidInputException ]
                      ResultPath: null
                      Next: EcsCluster
                    Next: EcsCluster

                  EcsCluster:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-ecs-cluster
                      Template: /apps-infra/ecs-cluster.yaml
                      Parameters:
                        EfsId.$: $.output.Efs.EfsId
                        SecurityGroup.$: $.output.SecurityGroups.DefaultAppSecurityGroup
                        PrivateDomain: attini.internal
                    End: true

              - StartAt: Alb
                States:
                  Alb:
                    Type: AttiniCfn
                    Properties:
                      StackName: !Sub ${AttiniEnvironmentName}-public-alb
                      Template: /apps-infra/public-alb.yaml
                      Parameters:
                        SecurityGroup.$: $.output.SecurityGroups.PublicAlbSecurityGroup
                    End: true

          MergeInfraResources:
            Type: AttiniMergeOutput
            Next: GetRdsDbIdentifierConfig

          GetRdsDbIdentifierConfig:
            Type: Task
            ResultPath: $
            OutputPath: $.Payload
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: !Ref GetConfigLambda
              Payload:
                Event.$: $
                DbiResourceId.$: $.output.Postgres.PostgresInstanceName
                OutputKey: DbiResourceId
            Next: GetServiceConfigFiles

          GetServiceConfigFiles:
            Type: Task
            ResultPath: $
            OutputPath: $.Payload
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: !Ref GetConfigLambda
              Payload:
                Event.$: $
                FilesPath: !Sub /services/config/${AttiniEnvironmentName}/
                OutputKey: StandardEcsConfigFiles
            Next: StandardEcsServiceSecuritySetups

          StandardEcsServiceSecuritySetups:
            Type: AttiniMap
            ItemsPath: $.customData.StandardEcsConfigFiles
            MaxConcurrency: 0
            Iterator:
              StartAt: StandardEcsServiceSecuritySetup
              States:
                StandardEcsServiceSecuritySetup:
                  Type: AttiniCfn
                  Properties:
                    Template: /services/ecs-service-security-setup.yaml
                    Variables:
                      Environment: !Ref AttiniEnvironmentName
                      TemplatePath: /services/ecs-service-security-setup.yaml
                      StackNameSuffix: !Sub service-security-setup
                      EfsId.$: $.output.Efs.EfsId
                      DbiResourceId.$: $.customData.DbiResourceId
                      MeshName.$: $.output.EcsCluster.AppMesh
                  End: true
            Next: MergeSecuritySetup

          MergeSecuritySetup:
            Type: AttiniMergeOutput
            Next: GetServiceConfigFilesForServices

          GetServiceConfigFilesForServices:
            Type: Task
            ResultPath: $
            OutputPath: $.Payload
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: !Ref GetConfigLambda
              Payload:
                Event.$: $
                FilesPath: !Sub /services/config/${AttiniEnvironmentName}/
                OutputKey: StandardEcsConfigFiles
            Next: StandardEcsServices

          StandardEcsServices:
            Type: AttiniMap
            ItemsPath: $.customData.StandardEcsConfigFiles
            MaxConcurrency: 0
            Iterator:
              StartAt: StandardEcsService
              States:
                StandardEcsService:
                  Type: AttiniCfn
                  Properties:
                    Template: /services/ecs-service.yaml
                    Variables:
                      Environment: !Ref AttiniEnvironmentName
                      StackNameSuffix: service
                      EcsCluster.$:
                        $.output.EcsCluster.EcsClusterName
                      EfsId.$:
                        $.output.Efs.EfsId
                      TaskExecutionRoleArn.$:
                        $.output.EcsClusterSecuritySetup.TaskExecutionRoleArn
                      CloudMapNamespaceId.$:
                        $.output.EcsCluster.CloudMapNamespaceId
                      CloudMapNamespaceName.$:
                        $.output.EcsCluster.CloudMapNamespaceName
                      MeshName.$:
                        $.output.EcsCluster.AppMesh
                      PublicApiServiceHttpTargetGroup.$:
                        $.output.Alb.PublicApiServiceHttpTargetGroup
                      SecurityGroup.$:
                        $.output.SecurityGroups.DefaultAppSecurityGroup
                      PublicSecurityGroup.$:
                        $.output.SecurityGroups.PublicGatewaySecurityGroup
                  End: true
            End: true




  GetConfigLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Gets config for ${AttiniDistributionName} deployment plan
      InlineCode: !Sub |
          import boto3
          import os
          import logging
          import json
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          s3_client = boto3.client('s3')
          rds_client = boto3.client('rds')
          iam_client = boto3.client('iam')

          def get_db_identifier(db_instance_id):
            return rds_client.describe_db_instances(
                DBInstanceIdentifier=db_instance_id
            )["DBInstances"][0]["DbiResourceId"]

          def get_files_names(distribution_path, files_path):
            prefix = f"{distribution_path}{files_path}"

            response = s3_client.list_objects_v2(
                Bucket=os.environ["Bucket"],
                MaxKeys=100,
                Prefix=prefix
            )

            keys = []
            for o in response["Contents"]:
              for key, value in o.items():
                  logger.info(value)
                  if key == "Key":
                      keys.append(value[len(distribution_path):])
            return keys

          def lambda_handler(event, context):
            logger.info(f'Got event: {json.dumps(event)}')

            if "DbiResourceId" in event:
              event["Event"]["customData"][event["OutputKey"]] = get_db_identifier(event["DbiResourceId"])
            elif "FilesPath" in event:
              distribution_path = event["Event"]["deploymentOriginData"]["deploymentSource"]["deploymentSourcePrefix"]
              event["Event"]["customData"][event["OutputKey"]] = get_files_names(distribution_path, event["FilesPath"])


            return event["Event"]
      Environment:
        Variables:
          Environment: !Ref AttiniEnvironmentName
          Bucket: !Sub attini-artifact-store-${AWS::Region}-${AWS::AccountId}
          DistributionPath: !Sub ${AttiniEnvironmentName}/${AttiniDistributionName}/${AttiniDistributionId}/distribution-origin
      Handler: index.lambda_handler
      MemorySize: 256
      Runtime: python3.8
      Timeout: 300
      Policies:
        Statement:
          - Action:
            - rds:DescribeDBInstances
            Effect: Allow
            Resource: "*"
          - Action:
            - s3:List*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::attini-artifact-store-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:aws:s3:::attini-artifact-store-${AWS::Region}-${AWS::AccountId}/*


  GetConfigLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetConfigLambda}
      RetentionInDays: 30


  AttiniDeploymentPlanRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: states.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-deployment-plan-default-role-inline-policy
        PolicyDocument:
          Statement:
          - Action:
            - lambda:List*
            - lambda:Get*
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          - Action:
            - iam:CreateServiceLinkedRole
            Effect: Allow
            Resource: arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS*
            Condition:
              StringLike:
                iam:AWSServiceName: ecs.amazonaws.com
